syntax = "proto3";

message SudokuDesignEvaluationRequest {
  int64 version = 1;
}

message SudokuDesignEvaluationJob {
  // 0 means empty, 1-9 means the respective digit is in that field
  // addressing is as follows: field[column+9*row]
  // this field always has 81 elements
  repeated int32 field = 1;
}

message SudokuDesignEvaluationResult {
  // 0 = no solution
  // 1 = unique solution
  // 2 = multiple solutions
  int32 status = 1;

  // encoding as SudokuDesignEvaluationJob.field, present only if status = 1, all values are set to != 0
  repeated int32 solution = 2;

  // encoding as SudokuDesignEvaluationJob.field, present only if status = 0
  // a minimal set of values that are sufficient for having no solution are set, all others are 0
  repeated int32 minimal_unsolvable = 3;
}

message KeyValuePair {
  string key = 1;
  string value = 2;
}

message Parameters {
  // 0 means no limit (do not use that!)
  int32 number_of_answers = 1;
  bool return_only_optimal_answers = 2;
  repeated KeyValuePair additional_parameters = 3;
}

message SolverJob {
  // ASP Core-2 program
  string program = 1;
  Parameters parameters = 2;
}

message CostElement {
  int32 level = 1;
  int32 cost = 2;
}

message Answerset {
  repeated string atoms = 1;
  repeated CostElement costs = 2;
  bool is_known_optimal = 3;
}

message ResultDescription {
  bool success = 1;
  int32 code = 2;
  repeated string messages = 3;
}

message SolveResultAnswersets {
  ResultDescription description = 1;
  repeated Answerset answers = 2;
}

message Empty {
  int64 empty = 1;
}

service SudokuDesignEvaluationRequestDataBroker {
  rpc requestSudokuEvaluation(SudokuDesignEvaluationRequest) returns(SudokuDesignEvaluationJob);
}

service SudokuDesignEvaluationProblemEncoder {
  rpc evaluateSudokuDesign(SudokuDesignEvaluationJob) returns (SolverJob);
}

service OneshotSolver {
  rpc solve(SolverJob) returns (SolveResultAnswersets);
}

service SudokuDesignEvaluationResultDecoder {
  rpc processEvaluationResult(SolveResultAnswersets) returns(SudokuDesignEvaluationResult);
}

service SudokuDesignEvaluationResultProcessor {
  rpc processEvaluationResult(SudokuDesignEvaluationResult) returns(Empty);
}
